

# This file was *autogenerated* from the file bb_main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_10 = Integer(10)
import time
timing_data = open("time_data.txt","a")
timing_data.write("Started bb_main at " + str(time.strftime("%H:%M:%S, %D", time.localtime())) + "\n")
timing_data.close()

exec(open("./Code/rna_poly.py").read())
exec(open("./Code/polytope_funs.py").read())
exec(open("./Code/SuboptFile.py").read())
exec(open("./Code/NopctFile.py").read())
exec(open("./Code/accuracy_analysis.py").read())
exec(open("./Code/FilenameToAccessionNumberTools.py").read())
exec(open("./Code/bb_algorithms.py").read())
exec(open("./Code/bb_merge_alg.py").read())


seq_list = "MaxAccuracyFiles/tRNA.txt" #needs to be changed

## Initializes Data files
PolytopeList = InitializePolytopes(seq_list)
Slices = OrderSlices(PolytopeList)
AccuracyData = CreateAccuracyData(seq_list, PolytopeList, Slices)
NameData = CreateNameData(seq_list)
u = FindBounds(seq_list) # do we need this? Seems like not
NSequences = len(PolytopeList)

## Imports the L value for lower bound on accuracy
## The code assumes that there is an identical Lfile.txt in the same directory 
L = getLValue("L.txt")

## Creates a double array
## IndexOrder[x] is the index order for sequence x
## IndexOrder[x] lists the polytope indexes for x from highest accuracy to lowest accuracy
IndexOrder = []
for i in range(_sage_const_0 ,NSequences):
    ThisIndexOrder = []
    for j in range(len(AccuracyData[i])):
        ThisIndexOrder.append( (AccuracyData[i][j], j) )
    ThisIndexOrder.sort(reverse=True)
    ThisIndexOrder = [r[_sage_const_1 ] for r in ThisIndexOrder]
    IndexOrder.append(ThisIndexOrder)


timing_data = open("time_data.txt","a")
timing_data.write("Started step_0 at " + str(time.strftime("%H:%M:%S, %D", time.localtime())) + "\n")
timing_data.close()

## Consider each region from each sequence
## Consider all regions it intersects from each sequence
## Take the highest accuracy value from the regions it intersects from each sequence and sum them together
## This sum must be greater than L * NSequences otherwise we know that any combination including it
## Will be thrown out eventually for a bad accuracy value
## Thereby, we can reduce the regions we are considering for each sequence from ~500 down to
## about ~15, drastically increasing the runtime
## In addition, using IndexOrder created above, we can check the regions it intersects from highest accuracy
## to lowest accuracy in order to avoid having to check all regions from each intersecting sequence.
## This outputs the regions still in consideration for sequence x to "MergeData/x.txt"
for x in range(_sage_const_0 ,NSequences):
    print("Starting sequence", x, "of Step0")
    Considering = []
    for i in range(len(Slices[x])):
        print(x,i)
        z = Slices[x][i]
        TotalBest = _sage_const_0 
        for j in range(_sage_const_0 , NSequences):
            PolytopePruneList = Slices[j]
            k = _sage_const_0 
            while (k < len(IndexOrder[j]) and z.intersection(PolytopePruneList[IndexOrder[j][k]]).is_empty()):
                k += _sage_const_1 
            if (k >= len(IndexOrder[j])):
                break
            TotalBest += AccuracyData[j][IndexOrder[j][k]]
        if (TotalBest > L * NSequences):
            Considering.append(i)

    print(Considering)
    outfile = open("MergeData/" + str(x) + ".txt", "w")
    for i in range(len(Considering)):
        outfile.write("[" + str(Considering[i]) + "]" + "\n")
    outfile.close()

    ThisIndexOrder = []
    for j in Considering:
        ThisIndexOrder.append( (AccuracyData[x][j], j) )
    ## Reverse sorts greatest to smallest
    ThisIndexOrder.sort(reverse=True)
    ThisIndexOrder = [r[_sage_const_1 ] for r in ThisIndexOrder]
    IndexOrder[x] = ThisIndexOrder
    print(ThisIndexOrder)

timing_data = open("time_data.txt","a")
timing_data.write("Finished step_0 at " + str(time.strftime("%H:%M:%S, %D", time.localtime())) + "\n")
timing_data.close()

print("step_0 completed")

betterAccPrune = createAccData(PolytopeList, Slices, AccuracyData,L)

timing_data = open("time_data.txt","a")
timing_data.write("Finished AccGen at " + str(time.strftime("%H:%M:%S, %D", time.localtime())) + "\n")
timing_data.close()

print("AccGen completed")

## Start of main

x = "0"
for i in range(_sage_const_1 , NSequences):
    x = x + "," + str(i)
Considering = [x]
while (len(Considering[_sage_const_0 ].split(",")) > _sage_const_2 ):
    x = Considering.pop(_sage_const_0 )
    x = x.split(",")
    Len = (len(x) + _sage_const_1 ) // _sage_const_2 
    y = x[_sage_const_0 ]
    for i in range(_sage_const_1 , Len):
        y = y + "," + x[i]
    z = x[Len]
    for i in range(Len+_sage_const_1 ,len(x)):
        z = z + "," + x[i]
    Considering.append(y)
    Considering.append(z)

## Joining to have necessary groups of two
for i in Considering:
    if (len(i.split(",")) == _sage_const_2 ):
        x = i.split(",")[_sage_const_0 ]
        y = i.split(",")[_sage_const_1 ]
        z = x + "," + y
        Merge("MergeData/" + x + ".txt", "MergeData/" + y + ".txt",
              "MergeData/" + z + ".txt",
              PolytopeList, Slices, AccuracyData, L, u, betterAccPrune)
        

while (len(Considering) > _sage_const_2 ):
    print("Starting merge of", x, "and", y)
    x = Considering.pop(_sage_const_0 )
    y = Considering.pop(_sage_const_0 )
    z = x + "," + y
    if (len(z.split(",")) >= _sage_const_10 ):
        NewMerge("MergeData/" + x + ".txt", "MergeData/" + y + ".txt",
          "MergeData/" + z + ".txt",
          PolytopeList, Slices, AccuracyData, L, u, betterAccPrune)
    else:
        Merge("MergeData/" + x + ".txt", "MergeData/" + y + ".txt",
          "MergeData/" + z + ".txt",
          PolytopeList, Slices, AccuracyData, L, u, betterAccPrune)
    Considering.append(z)

timing_data = open("time_data.txt","a")
timing_data.write("Finished normal merges at " + str(time.strftime("%H:%M:%S, %D", time.localtime())) + "\n")
timing_data.close()

print("Starting AccSort")
AccSort("MergeData/" + Considering[_sage_const_0 ] + ".txt", "MergeData/S" + Considering[_sage_const_0 ] + ".txt", AccuracyData)
AccSort("MergeData/" + Considering[_sage_const_1 ] + ".txt", "MergeData/S" + Considering[_sage_const_1 ] + ".txt", AccuracyData)

timing_data = open("time_data.txt","a")
timing_data.write("Finished AccSort at " + str(time.strftime("%H:%M:%S, %D", time.localtime())) + "\n")
timing_data.close()

print("Starting FinalMerge")

FinalMerge("MergeData/S" + Considering[_sage_const_0 ] + ".txt", "MergeData/S" + Considering[_sage_const_1 ] + ".txt",
           "MergeData/FinalOutput.txt", PolytopeList, Slices, AccuracyData, NameData, L)

timing_data = open("time_data.txt","a")
timing_data.write("Finished bb_main at " + str(time.strftime("%H:%M:%S, %D", time.localtime())))
timing_data.close()

